# require "nokogiri"
# require "open-uri"
# require "pry"

# see phase 1 lesson, collaborating objects lab

class Brand_names  #brand_names relies on the scraper file to do its job of parsing the brand names

    attr_accessor :name, :link, :cigars #added cigars to capture the number of cigars a brand has produced. should this be attr reader if expect this not to change? 
   
    @@all = []                
    # cigars_info_count = cigars_info.count
    # i = 1


    def initialize(name)  # should we initialise with number of cigars associated with the brand name?
        @name = name
        @link = link
        #@cigars = [] # added cigars to capture the number of cigars a brand has produced however need a method to fill this array
        @@all << self          
    end

    def self.all
        @@all
    end

    def self.find_or_create_by_name(brand_name)                   #This class method should take the name that is passed in (remember, it will be a string), and do one of two things: find the brand_name instance that has that name or create one if it doesn't exist. Either way, the return value of the method will be an instance of a brand_name with the name attribute filled out.
        if self.all.find { |brand| brand.name == brand_name }
        self.all.find { |brand| brand.name == brand_name }
        else
        self.new(brand_name)
        end
    end
    
    def self.print_brand_names
        self.brand_name.each{|brand_name| puts brand_name.name}
    end

    # def cigar_name
    #     "This brand is #{@name} and has #{i} cigars."  #add in number of cigars
    # end

    def self.count
        self.all.count
    end

    def cigars
        Brand_name.all.select {|cigar| cigar.brand_name == self}
    end
    
    def list_cigars
        "This brand has #{cigars.count} cigar(s)."
    end






    #how to print cigars associated with that brand name? #you need all cigars to be instances of Cigar class because they must respond to #name to work(?) - not a string 

    # def self.associated_cigars
    #     while i < cigars_info_count - 1 # added -1 as will go into an array
    #         product = i 

    #         @cigars << 
    # end


    # def print_cigars #or print brand names if brands do not have more than one cigar each. If more than one cigar, add in :cigars attr accessor and in initialize @cigars = cigards or an empty array?
    #     self.cigars.each { |cigar| puts cigar.name }   #or replace cigar with brand?
    # end

    # def cigars
    #     Cigar.all.select {|cigar| cigar.brand == self}      # if brands produce more than one type of cigar. this method means I should create a Cigar class. And then this #cigars method here will get all existing cigar instances from Cigar class and select only the ones that are associated with this Brand instance. 
    # end

    # def count      #counts how many brands OR how many cigars attached to that brand, if more than one?
    #     self.all.count
    # end
end